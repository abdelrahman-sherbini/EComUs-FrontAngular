/**
 * E-Commerce Application
 *
 * Contact: sad@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { PagedResponseUserDTO } from '../model/paged-response-user-dto';
// @ts-ignore
import { UserDTO } from '../model/user-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    UserController2ServiceInterface
} from './user-controller2.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class UserController2Service extends BaseService implements UserController2ServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allUsers(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Array<UserDTO>>;
    public allUsers(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Array<UserDTO>>>;
    public allUsers(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Array<UserDTO>>>;
    public allUsers(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/users/all`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Array<UserDTO>>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public user(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public user(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public user(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public user(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling user.');
        }

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/users/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<string>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageNum 
     * @param pageSize 
     * @param sortField Field to sort by. Allowed values: BD, role, phone, creditLimit, userName, job, userId, email
     * @param sortDir Sort direction
     * @param keyword Keyword to search across multiple fields
     * @param userId Filter by user ID
     * @param userName Filter by username
     * @param email Filter by email
     * @param role Filter by user role
     * @param job Filter by job
     * @param phone Filter by phone number
     * @param creditLimitMin Filter by credit minim limit
     * @param creditLimitMax Filter by credit maximum limit
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public users(pageNum?: number, pageSize?: number, sortField?: 'BD' | 'role' | 'phone' | 'creditLimit' | 'userName' | 'job' | 'userId' | 'email', sortDir?: 'asc' | 'desc', keyword?: any, userId?: any, userName?: any, email?: any, role?: 'USER' | 'ADMIN', job?: any, phone?: any, creditLimitMin?: any, creditLimitMax?: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PagedResponseUserDTO>;
    public users(pageNum?: number, pageSize?: number, sortField?: 'BD' | 'role' | 'phone' | 'creditLimit' | 'userName' | 'job' | 'userId' | 'email', sortDir?: 'asc' | 'desc', keyword?: any, userId?: any, userName?: any, email?: any, role?: 'USER' | 'ADMIN', job?: any, phone?: any, creditLimitMin?: any, creditLimitMax?: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PagedResponseUserDTO>>;
    public users(pageNum?: number, pageSize?: number, sortField?: 'BD' | 'role' | 'phone' | 'creditLimit' | 'userName' | 'job' | 'userId' | 'email', sortDir?: 'asc' | 'desc', keyword?: any, userId?: any, userName?: any, email?: any, role?: 'USER' | 'ADMIN', job?: any, phone?: any, creditLimitMin?: any, creditLimitMax?: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PagedResponseUserDTO>>;
    public users(pageNum?: number, pageSize?: number, sortField?: 'BD' | 'role' | 'phone' | 'creditLimit' | 'userName' | 'job' | 'userId' | 'email', sortDir?: 'asc' | 'desc', keyword?: any, userId?: any, userName?: any, email?: any, role?: 'USER' | 'ADMIN', job?: any, phone?: any, creditLimitMin?: any, creditLimitMax?: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageNum, 'pageNum');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'pageSize');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortField, 'sortField');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortDir, 'sortDir');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>keyword, 'keyword');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'userId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userName, 'userName');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>email, 'email');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>role, 'role');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>job, 'job');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>phone, 'phone');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>creditLimitMin, 'creditLimitMin');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>creditLimitMax, 'creditLimitMax');

        let localVarHeaders = this.defaultHeaders;

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/users`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PagedResponseUserDTO>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
