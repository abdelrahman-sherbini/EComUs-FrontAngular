/**
 * E-Commerce Application
 *
 * Contact: sad@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CheckOutOrderDTO } from '../model/check-out-order-dto';
// @ts-ignore
import { OrderDTO } from '../model/order-dto';
// @ts-ignore
import { PagedResponseOrderDTO } from '../model/paged-response-order-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';
import {
    CustomerOrdersServiceInterface
} from './customer-orders.serviceInterface';



@Injectable({
  providedIn: 'root'
})
export class CustomerOrdersService extends BaseService implements CustomerOrdersServiceInterface {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * @param checkOutOrderDTO 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrder(checkOutOrderDTO: CheckOutOrderDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<OrderDTO>;
    public createOrder(checkOutOrderDTO: CheckOutOrderDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<OrderDTO>>;
    public createOrder(checkOutOrderDTO: CheckOutOrderDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<OrderDTO>>;
    public createOrder(checkOutOrderDTO: CheckOutOrderDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (checkOutOrderDTO === null || checkOutOrderDTO === undefined) {
            throw new Error('Required parameter checkOutOrderDTO was null or undefined when calling createOrder.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (BearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('BearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/public/orders`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<OrderDTO>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: checkOutOrderDTO,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrderById(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<OrderDTO>;
    public getOrderById(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<OrderDTO>>;
    public getOrderById(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<OrderDTO>>;
    public getOrderById(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOrderById.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (BearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('BearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/public/orders/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<OrderDTO>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageNum 
     * @param pageSize 
     * @param sortField Field to sort by. Allowed values: address, payType, orderId, price, user, status
     * @param sortDir Sort direction
     * @param keyword Keyword to search across multiple fields
     * @param priceMin Filter by priceMin
     * @param priceMax Filter by priceMax
     * @param orderIdMax Filter by order ID MAX
     * @param orderIdMin Filter by order ID MIN
     * @param address Filter by address
     * @param orderStatus Filter by OrderStatus
     * @param payType Filter by payment type
     * @param userId Filter by userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrders(pageNum?: number, pageSize?: number, sortField?: 'address' | 'payType' | 'orderId' | 'price' | 'user' | 'status', sortDir?: 'asc' | 'desc', keyword?: any, priceMin?: any, priceMax?: any, orderIdMax?: any, orderIdMin?: any, address?: any, orderStatus?: 'CANCELED' | 'COMPLETED' | 'PROCESSING' | 'SHIPPED', payType?: 'CASH' | 'CREDIT', userId?: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<PagedResponseOrderDTO>;
    public getOrders(pageNum?: number, pageSize?: number, sortField?: 'address' | 'payType' | 'orderId' | 'price' | 'user' | 'status', sortDir?: 'asc' | 'desc', keyword?: any, priceMin?: any, priceMax?: any, orderIdMax?: any, orderIdMin?: any, address?: any, orderStatus?: 'CANCELED' | 'COMPLETED' | 'PROCESSING' | 'SHIPPED', payType?: 'CASH' | 'CREDIT', userId?: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<PagedResponseOrderDTO>>;
    public getOrders(pageNum?: number, pageSize?: number, sortField?: 'address' | 'payType' | 'orderId' | 'price' | 'user' | 'status', sortDir?: 'asc' | 'desc', keyword?: any, priceMin?: any, priceMax?: any, orderIdMax?: any, orderIdMin?: any, address?: any, orderStatus?: 'CANCELED' | 'COMPLETED' | 'PROCESSING' | 'SHIPPED', payType?: 'CASH' | 'CREDIT', userId?: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<PagedResponseOrderDTO>>;
    public getOrders(pageNum?: number, pageSize?: number, sortField?: 'address' | 'payType' | 'orderId' | 'price' | 'user' | 'status', sortDir?: 'asc' | 'desc', keyword?: any, priceMin?: any, priceMax?: any, orderIdMax?: any, orderIdMin?: any, address?: any, orderStatus?: 'CANCELED' | 'COMPLETED' | 'PROCESSING' | 'SHIPPED', payType?: 'CASH' | 'CREDIT', userId?: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageNum, 'pageNum');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'pageSize');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortField, 'sortField');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sortDir, 'sortDir');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>keyword, 'keyword');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>priceMin, 'priceMin');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>priceMax, 'priceMax');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>orderIdMax, 'orderIdMax');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>orderIdMin, 'orderIdMin');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>address, 'address');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>orderStatus, 'OrderStatus');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>payType, 'payType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>userId, 'userId');

        let localVarHeaders = this.defaultHeaders;

        // authentication (BearerAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('BearerAuth', 'Authorization', localVarHeaders, 'Bearer ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/public/orders`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<PagedResponseOrderDTO>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
